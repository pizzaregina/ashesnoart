{% extends 'base.html.twig' %}

{% block title %}@ashes.No.art{% endblock %}

{% block body %}

<div class="min-h-screen flex flex-col pt-0 sm:pt-16">
    <!-- Bouton "hamburger" visible sur mobile -->
   <button id="hamburger" class="fixed block z-50 sm:hidden p-2 ms-3 text-gray-500 mt-5">
        <svg class="w-8 h-8 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5 7h14M5 12h14M5 17h14"/>
</svg>
 <!-- Icône Font Awesome -->
    </button>

    

    <!-- Sidebar -->
   <aside id="sidebar-multi-level-sidebar" class="fixed bg-white left-0 z-40 w-64 h-screen border-r-4 border-black transform -translate-x-full sm:translate-x-0 transition-transform duration-300 sm:mt-0   sm:bg-transparent dark:bg-gray-800">
    <div class="h-full px-3 py-4 overflow-y-auto">
        <ul class="space-y-2 font-medium mt-36">
                <!-- "Works" avec une taille de texte plus grande -->
                <li>
                    <h3 id="all-works-button" class="flex items-center p-2 text-gray-900 rounded-lg ">
                        <span class="ms-3 text-5xl font-bold font-snowstorm"> My works</span>
                    <h3>
                </li>

                <!-- Menu à plusieurs niveaux pour chaque catégorie -->
               {% for category in categories %}
    <li>
        <button type="button" data-category-id="{{ category.id }}" class="category-button flex items-center w-full p-2 text-base font-snowstorm text-gray-900 rounded-lg hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700" aria-controls="dropdown-{{ category.id }}" data-collapse-toggle="dropdown-{{ category.id }}">
            <span class="flex-1 ms-3 text-left text-2xl">{{ category.name }}</span>
            {% if category.name != 'All' %}
                <svg class="chevron-icon w-3 h-3 flex-shrink-0 ms-2" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 10 6" aria-hidden="true">
                    <path d="M1 1l4 4 4-4"></path>
                </svg>
            {% endif %}
        </button>
        {% if category.name != 'All' %}
            <ul id="dropdown-{{ category.id }}" class="hidden py-2 space-y-2">
                {% for subcategory in category.subcategories %}
                    <li>
                        <a href="#" data-sub-category-id="{{ subcategory.id }}" class="subcategory-button flex items-center w-full p-2 pl-11 text-2xl font-snowstorm text-gray-900 rounded-lg hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">{{ subcategory.name }}</a>
                    </li>
                {% endfor %}
            </ul>
        {% endif %}
    </li>
{% endfor %}

            </ul>
        </div>
    </aside>

    <!-- Contenu principal -->
    <div class="mt-16 sm:mt-0 sm:ml-64 flex-grow">
        <div class="flex-grow flex flex-col">
            <!-- Header -->
          <header class="relative text-left sm:text-left text-center">
    <div class="relative w-full"> <!-- Prend toute la largeur de l'écran -->
        <h1 class=" text-2xl sm:text-4xl md:text-5xl lg:text-8xl font-bold bg-white bg-opacity-30 px-4 py-2 relative z-10 w-full max-w-full sm:max-w-max mx-0"> <!-- w-full pour toute la largeur sur petits écrans -->
            <span class="font-snowstorm">@</span><span class="font-siamese">ashes.No.art</span>
        </h1>
        <hr class="absolute top-0 left-0 w-0 border-l-4 border-black hidden sm:block"> <!-- Cache la ligne sur petits écrans -->
    </div>
</header>

 <!-- Ajouter le titre de la catégorie ici -->
        <h2 id="category-title" class="category-title text-center text-2xl sm:text-5xl font-bold font-snowstorm !mt-8 mb-4"></h2>
            <div id="spinner" class="hidden flex justify-center items-center h-64 col-span-full">
                <div role="status" class="animate-spin inline-block w-12 h-12 border-4 border-t-transparent border-red-500 rounded-full"></div>
                <span class="sr-only">Loading...</span>
            </div>

            <div id="portfolio-description" class="p-6">
        <p class="text-lg font-siamese">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ac vestibulum erat. Mauris at lorem eu elit gravida tempor vitae vitae lectus. Integer feugiat, metus eu tincidunt convallis, urna est commodo nisl, vitae ullamcorper arcu mauris at sapien. Fusce sollicitudin, urna quis vehicula semper, nibh ipsum vestibulum eros, sed dictum justo ex non metus. Suspendisse potenti.
        </p>
    </div>

            <!-- Grid Section -->
            <section id="artwork-container" class="p-4 md:p-8 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">

                <!-- Images with Tailwind utility classes -->
                 
                <div class="artwork-item">
                    
                </div>
            </section>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-gradient-to-r from-black to-transparent text-white text-center py-8 w-full mt-auto">
        <div class="flex justify-center items-center space-x-4 font-snowstorm">
            <a href="https://www.instagram.com/ashes.NO.art" target="_blank" class="text-xl">
                <i class="fab fa-instagram"></i>
            </a>
            <span class="font-siamese text-2xl">
                <span class="font-snowstorm">@</span>ashes.No.art
            </span>
            <a href="https://www.tiktok.com/@ashes.NO.art" target="_blank" class="text-xl">
                <i class="fab fa-tiktok"></i>
            </a>
        </div>
    </footer>
</div>

<div id="imageModal" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-full max-h-full flex items-center justify-center bg-gray-900 bg-opacity-50 transition-opacity">
    <div class="relative w-full max-w-xl max-h-full">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
            <div class="flex justify-between items-center p-4 rounded-t border-b dark:border-gray-600">
                <button type="button" class="close-modal text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="imageModal">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
            </div>
            <div class="p-6 space-y-6">
    <h2 id="modalTitle" class="text-xl font-bold text-center dark:text-white"></h2>
    <p id="modalDescription" class="text-base text-center dark:text-gray-300"></p>
    <img id="modalImage" src="" alt="Image en grand" class="w-full h-auto object-contain">
</div>

        </div>
    </div>
</div>


{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>

    
    
   document.addEventListener('DOMContentLoaded', function () {
    const hamburgerButton = document.getElementById('hamburger');
    const sidebar = document.getElementById('sidebar-multi-level-sidebar');

    hamburgerButton.addEventListener('click', function () {
        // Vérifiez la largeur de l'écran pour s'assurer que cela n'affecte que les petits écrans
        if (window.innerWidth < 640) { // Pour les petits écrans seulement
            // Si la barre latérale est hors de l'écran, on la ramène à l'intérieur avec une transition
            if (sidebar.classList.contains('-translate-x-full')) {
                sidebar.classList.remove('-translate-x-full'); // La ramener dans l'écran
                sidebar.classList.add('translate-x-0');
            } else {
                // Sinon, on la fait glisser hors de l'écran
                sidebar.classList.add('-translate-x-full');
                sidebar.classList.remove('translate-x-0');
            }
        }
    });
});
document.addEventListener('DOMContentLoaded', function () {
    const categoryButtons = document.querySelectorAll('.category-button');
    const subCategoryButtons = document.querySelectorAll('.subcategory-button');
    const artworkContainer = document.getElementById('artwork-container');
    const imageModal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage');
    const closeModalButtons = document.querySelectorAll('.close-modal');
    const spinnerContainer = document.getElementById('spinner');
    const hamburgerButton = document.getElementById('hamburger');
    const sidebar = document.getElementById('sidebar-multi-level-sidebar');
    const categoryTitleElement = document.getElementById('category-title');
    const portfolioDescription = document.getElementById('portfolio-description');
    
  // Fonction pour cacher la description du portfolio avec une transition
function hidePortfolioDescription() {
    if (portfolioDescription) {
        // Ajouter la classe 'hidden' pour déclencher la transition CSS
        portfolioDescription.classList.add('hidden');
        
        // Après la transition, retirer complètement l'élément du flux
        setTimeout(() => {
            portfolioDescription.style.display = 'none';
        }, 500); // Durée correspondant à la transition CSS
    }
}
 

    // Fonction pour afficher la modal avec l'image en grand
    function openModal(imageSrc, title, description) {
        modalImage.src = imageSrc;
        document.getElementById('modalTitle').textContent = title;
        document.getElementById('modalDescription').textContent = description;
    
        imageModal.classList.remove('hidden');
        setTimeout(() => {
            imageModal.style.opacity = '1';
            imageModal.style.transform = 'scale(1)';
        }, 100);
    }
    

    // Fonction pour fermer la modal
    function closeModal() {
        imageModal.style.opacity = '0';
        imageModal.style.transform = 'scale(0.95)';
        setTimeout(() => {
            imageModal.classList.add('hidden');
        }, 300);
    }

    closeModalButtons.forEach(button => {
        button.addEventListener('click', closeModal);
    });

    // Fonction pour attacher un événement 'click' à chaque image
    function attachImageClickEvent(imgElement) {
        imgElement.addEventListener('click', function () {
            const title = this.dataset.title;
            const description = this.dataset.description;
            openModal(this.src, title, description);
        });
    }

    // Gestionnaire de clic pour les catégories (inclut la catégorie "All")
    categoryButtons.forEach(button => {
        button.addEventListener('click', function (event) {
            event.preventDefault();
            const categoryId = this.getAttribute('data-category-id');
            const categoryName = this.textContent.trim();
    
            // Sélectionner le chevron dans le bouton cliqué
            const chevronIcon = this.querySelector('.chevron-icon');
    
            // Vérifier si la catégorie a des sous-catégories
            const dropdownId = this.getAttribute('aria-controls');
            const dropdownElement = document.getElementById(dropdownId);
    
            if (dropdownElement) {
                // La catégorie a des sous-catégories
    
                // Bascule la classe 'rotate-180' sur le chevron
                if (chevronIcon) {
                    chevronIcon.classList.toggle('rotate-180');
                }
    
                // Bascule l'affichage des sous-catégories
                dropdownElement.classList.toggle('hidden');
            } else {
                   hidePortfolioDescription();
                // La catégorie n'a pas de sous-catégories (ou c'est "All")
                // Effacer le contenu existant
                categoryTitleElement.textContent = categoryName;
                artworkContainer.innerHTML = ''; 
                
                // Afficher le spinner
                spinnerContainer.style.display = 'flex';
                spinnerContainer.style.zIndex = '1000';
    
                // Masquer le conteneur tant que les images ne sont pas chargées
                artworkContainer.style.opacity = '0';
                artworkContainer.style.transition = 'opacity 1s ease';

            // Requête pour récupérer les œuvres d'art d'une catégorie (ou "All")
            fetch(`/category/${categoryId}/artworks`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.length === 0) {
                        spinnerContainer.style.display = 'none';
                        artworkContainer.innerHTML = '<p class="text-center text-2xl text-gray-500">Aucun artwork disponible.</p>';
                    } else {
                        let imagesLoaded = 0;
                        const totalImages = data.length;

                        data.forEach((artwork, index) => {
                            const artworkElement = document.createElement('div');
                            artworkElement.classList.add('artwork-item', 'relative', 'bg-gray-100', 'rounded', 'shadow-lg', 'overflow-hidden');
                            artworkElement.style.opacity = '0';
                            artworkElement.style.transform = 'translateY(20px)';
                            artworkElement.style.transition = 'opacity 1s ease, transform 1s ease';

                            artworkElement.innerHTML = `
                                <img src="/uploads/images/${artwork.imagePath}" alt="${artwork.title}" class="w-full h-full object-cover cursor-pointer hidden">
                                <div class="absolute bottom-0 left-0 w-full p-4 bg-gradient-to-t from-black to-transparent text-white"></div>
                            `;

                            const imgElement = artworkElement.querySelector('img');
                            imgElement.dataset.title = artwork.title;
                            imgElement.dataset.description = artwork.description;
                            artworkContainer.appendChild(artworkElement);

                            if (imgElement.complete) {
                                imagesLoaded += 1;
                                imgElement.classList.remove('hidden');
                                setTimeout(() => {
                                    artworkElement.style.opacity = '1';
                                    artworkElement.style.transform = 'translateY(0)';
                                }, index * 200);

                                attachImageClickEvent(imgElement);

                                if (imagesLoaded === totalImages) {
                                    spinnerContainer.style.display = 'none';
                                    artworkContainer.style.opacity = '1';
                                }
                            } else {
                                imgElement.onload = function () {
                                    imagesLoaded += 1;
                                    imgElement.classList.remove('hidden');
                                    setTimeout(() => {
                                        artworkElement.style.opacity = '1';
                                        artworkElement.style.transform = 'translateY(0)';
                                    }, index * 200);

                                    attachImageClickEvent(imgElement);

                                    if (imagesLoaded === totalImages) {
                                        spinnerContainer.style.display = 'none';
                                        artworkContainer.style.opacity = '1';
                                    }
                                };

                                imgElement.onerror = function () {
                                    imagesLoaded += 1;
                                    if (imagesLoaded === totalImages) {
                                        spinnerContainer.style.display = 'none';
                                        artworkContainer.style.opacity = '1';
                                    }
                                };
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la récupération des artworks:', error);
                    spinnerContainer.style.display = 'none';
                    artworkContainer.innerHTML = '<p class="text-center text-2xl text-red-500">Erreur lors de la récupération des artworks.</p>';
                });
            }
        });
    });

    // Gestionnaire de clic pour les sous-catégories
    subCategoryButtons.forEach(button => {
        button.addEventListener('click', function (event) {
            event.preventDefault();
            const subCategoryId = this.getAttribute('data-sub-category-id');
            const subCategoryName = this.textContent.trim();
            

              hidePortfolioDescription();
             // Mettre à jour le titre de la catégorie
            categoryTitleElement.textContent = subCategoryName;
            // Effacer le contenu existant
            artworkContainer.innerHTML = ''; 
            
            // Afficher le spinner
            spinnerContainer.style.display = 'flex';
            spinnerContainer.style.zIndex = '1000';

            // Masquer le conteneur tant que les images ne sont pas chargées
            artworkContainer.style.opacity = '0';
            artworkContainer.style.transition = 'opacity 1s ease';

            // Requête pour récupérer les œuvres d'art d'une sous-catégorie spécifique
            fetch(`/subcategory/${subCategoryId}/artworks`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.length === 0) {
                        spinnerContainer.style.display = 'none';
                        artworkContainer.innerHTML = '<p class="text-center text-2xl text-gray-500">Aucun artwork disponible pour cette sous-catégorie.</p>';
                    } else {
                        let imagesLoaded = 0;
                        const totalImages = data.length;

                        data.forEach((artwork, index) => {
                            const artworkElement = document.createElement('div');
                            artworkElement.classList.add('artwork-item', 'relative', 'bg-gray-100', 'rounded', 'shadow-lg', 'overflow-hidden');
                            artworkElement.style.opacity = '0';
                            artworkElement.style.transform = 'translateY(20px)';
                            artworkElement.style.transition = 'opacity 1s ease, transform 1s ease';

                            artworkElement.innerHTML = `
                                <img src="/uploads/images/${artwork.imagePath}" alt="${artwork.title}" class="w-full h-full object-cover cursor-pointer hidden">
                                <div class="absolute bottom-0 left-0 w-full p-4 bg-gradient-to-t from-black to-transparent text-white"></div>
                            `;

                            const imgElement = artworkElement.querySelector('img');
                            imgElement.dataset.title = artwork.title;
                            imgElement.dataset.description = artwork.description;
                            artworkContainer.appendChild(artworkElement);

                            if (imgElement.complete) {
                                imagesLoaded += 1;
                                imgElement.classList.remove('hidden');
                                setTimeout(() => {
                                    artworkElement.style.opacity = '1';
                                    artworkElement.style.transform = 'translateY(0)';
                                }, index * 200);

                                attachImageClickEvent(imgElement);

                                if (imagesLoaded === totalImages) {
                                    spinnerContainer.style.display = 'none';
                                    artworkContainer.style.opacity = '1';
                                }
                            } else {
                                imgElement.onload = function () {
                                    imagesLoaded += 1;
                                    imgElement.classList.remove('hidden');
                                    setTimeout(() => {
                                        artworkElement.style.opacity = '1';
                                        artworkElement.style.transform = 'translateY(0)';
                                    }, index * 200);

                                    attachImageClickEvent(imgElement);

                                    if (imagesLoaded === totalImages) {
                                        spinnerContainer.style.display = 'none';
                                        artworkContainer.style.opacity = '1';
                                    }
                                };

                                imgElement.onerror = function () {
                                    imagesLoaded += 1;
                                    if (imagesLoaded === totalImages) {
                                        spinnerContainer.style.display = 'none';
                                        artworkContainer.style.opacity = '1';
                                    }
                                };
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la récupération des artworks:', error);
                    spinnerContainer.style.display = 'none';
                    artworkContainer.innerHTML = '<p class="text-center text-2xl text-red-500">Erreur lors de la récupération des artworks.</p>';
                });
        });
    });
});

document.addEventListener('DOMContentLoaded', function () {
    const sidebar = document.getElementById('sidebar');
    const toggleSidebarButton = document.getElementById('toggleSidebar');
    
    toggleSidebarButton.addEventListener('click', function () {
        // Si la sidebar est cachée, la faire apparaître
        if (sidebar.classList.contains('-translate-x-full')) {
            sidebar.classList.remove('-translate-x-full');
        } else {
            sidebar.classList.add('-translate-x-full');
        }
    });
});


</script>
    
  
{% endblock %}
